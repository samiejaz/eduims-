receipt details

function CashModeFields({
  appendSingleRow,
  customerInvoiceInsallments,
  unregister,
}) {
  const [receiptType, setReceiptType] = useState(false);

  useEffect(() => {
    unregister("onlineDetail");
    unregister("chequeDetail");
    unregister("dDDetail");
  }, [unregister]);

  const method = useForm({
    defaultValues: {
      ReceiptType: [],
      CustomerInstallments: [],
      CashAmount: 0,
      CashDescription: "",
    },
  });

  function onAdd(data) {
    appendSingleRow({
      ReceiptType: data.ReceiptType,
      CustomerInstallments: data.CustomerInstallments,
      CashAmount: data.CashAmount,
      CashDescription: data.CashDescription,
    });
    method.reset();
  }

  return (
    <>
      <Row className="mb-1">
        <Form.Group as={Col} controlId="ReceiptType" className="col-xl-3">
          <Form.Label>Receipt Type</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={receiptTypeOptions}
              name="ReceiptType"
              placeholder="Select a type"
              required={true}
              showOnFocus={true}
              onChange={(e) => {
                setReceiptType(e.value === "Advance");
                if (e.value === "Advance") {
                  method.setValue("CustomerInstallments", []);
                }
              }}
              focusOptions={() => {
                method.setFocus(
                  method.watch("ReceiptType") === "Advance"
                    ? "CashAmount"
                    : "CustomerInstallments"
                );
              }}
            />
          </div>
        </Form.Group>
        <Form.Group
          className="col-xl-3"
          as={Col}
          controlId="CustomerInstallments"
        >
          <Form.Label>Customer Installments</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={customerInvoiceInsallments}
              optionLabel="InstallmentTitle"
              optionValue="InvoiceInstallmentID"
              name="CustomerInstallments"
              placeholder="Select an insallment"
              showOnFocus={true}
              disabled={receiptType}
              focusOptions={() => method.setFocus("CashAmount")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3" as={Col} controlId="CashAmount">
          <Form.Label>Amount</Form.Label>
          <div>
            <NumberInput
              control={method.control}
              id={`CashAmount`}
              required={true}
              focusOptions={() => method.setFocus("CashDescription")}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group as={Col} controlId="CashDescription">
          <Form.Label>Description</Form.Label>

          <div>
            <CTextArea name={`CashDescription`} control={method.control} />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3" as={Col} controlId="Actions">
          <Form.Label></Form.Label>
          <DetailHeaderActionButtons
            handleAdd={() => method.handleSubmit(onAdd)()}
            handleClear={() => method.reset()}
          />
        </Form.Group>
      </Row>
    </>
  );
}

function CashModeDetail({
  isEnable,
  cashFieldsArray,
  customerInvoiceInsallments,
}) {
  const method = useFormContext();

  return (
    <>
      <table className="table table-responsive mt-3">
        <thead>
          <tr>
            <th
              className="p-2 text-white text-center "
              style={{ width: "2rem", background: cashDetailColor }}
            >
              Sr No.
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "30%", background: cashDetailColor }}
            >
              Receipt Type
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "30%", background: cashDetailColor }}
            >
              Customer Installment
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "4%", background: cashDetailColor }}
            >
              Amount
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "30%", background: cashDetailColor }}
            >
              Description
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "5%", background: cashDetailColor }}
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {cashFieldsArray.fields.map((item, index) => {
            return (
              <tr key={item.id}>
                <td>
                  <input
                    id="RowID"
                    readOnly
                    className="form-control"
                    style={{ padding: "0.25rem 0.4rem", fontSize: "0.9em" }}
                    value={index + 1}
                    disabled={!isEnable}
                  />
                </td>
                <td>
                  <CDropdown
                    control={method.control}
                    options={receiptTypeOptions}
                    name={`cashDetail.${index}.ReceiptType`}
                    placeholder="Select a type"
                    required={true}
                    showOnFocus={true}
                    disabled={!isEnable}
                    onChange={(e) => {
                      if (e.value === "Advance") {
                        method.setValue(
                          `cashDetail.${index}.CustomerInstallments`,
                          []
                        );
                      }
                    }}
                    focusOptions={() => {
                      method.setFocus(
                        method.watch(`cashDetail.${index}.ReceiptType`) ===
                          "Advance"
                          ? `cashDetail.${index}.CashAmount`
                          : `cashDetail.${index}.CustomerInstallments`
                      );
                    }}
                  />
                </td>
                <td>
                  <CDropdown
                    control={method.control}
                    name={`cashDetail.${index}.CustomerInstallments`}
                    options={customerInvoiceInsallments}
                    optionValue="InvoiceInstallmentID"
                    optionLabel="InstallmentTitle"
                    placeholder="Select an installment"
                    required={
                      method.watch(`cashDetail.${index}.ReceiptType`) !==
                      "Advance"
                    }
                    disabled={
                      !isEnable ||
                      method.watch(`cashDetail.${index}.ReceiptType`) ===
                        "Advance"
                    }
                  />
                </td>
                <td>
                  <NumberInput
                    control={method.control}
                    id={`cashDetail.${index}.CashAmount`}
                    disabled={!isEnable}
                  />
                </td>
                <td>
                  <Form.Control
                    as={"textarea"}
                    rows={1}
                    disabled={!isEnable}
                    className="form-control"
                    {...method.register(`cashDetail.${index}.CashDescription`)}
                    style={{
                      fontSize: "0.8em",
                    }}
                  />
                </td>
                <td>
                  <Button
                    icon="pi pi-minus"
                    severity="danger"
                    size="sm"
                    type="button"
                    style={{
                      padding: "0.25rem .7rem",
                      borderRadius: "16px",
                      fontSize: "0.9em",
                    }}
                    disabled={!isEnable}
                    onClick={() => cashFieldsArray.remove(index)}
                  />
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </>
  );
}
// Online Transfer Fields
function OnlineTransferFields({
  appendSingleRow,
  customerInvoiceInsallments,
  bankAccountsSelectData,
  unregister,
}) {
  const [receiptType, setReceiptType] = useState(false);
  const method = useForm({
    ReceiptType: [],
    FromBank: "",
    ReceivedInBankID: [],
    TransactionID: "",
    InvoiceInstallmentID: [],
    Amount: 0,
    DetailDescription: "",
  });

  useEffect(() => {
    unregister("cashDetail");
    unregister("chequeDetail");
    unregister("dDDetail");
  }, [unregister]);

  function onAdd(data) {
    appendSingleRow(data);
    method.setFocus("Customer");
    method.reset();
  }
  return (
    <>
      <Row className="mb-1">
        <Form.Group as={Col} controlId="ReceiptType" className="col-xl-3">
          <Form.Label>Receipt Type</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={receiptTypeOptions}
              name="ReceiptType"
              placeholder="Select a type"
              required={true}
              showOnFocus={true}
              onChange={(e) => {
                setReceiptType(e.value === "Advance");
                if (e.value === "Advance") {
                  method.setValue("InvoiceInstallmentID", []);
                }
              }}
              focusOptions={() => {
                method.setFocus(
                  method.watch("ReceiptType") === "Advance"
                    ? "Amount"
                    : "InvoiceInstallmentID"
                );
              }}
            />
          </div>
        </Form.Group>
        <Form.Group
          className="col-xl-3"
          as={Col}
          controlId="InvoiceInstallmentID"
        >
          <Form.Label>Customer Installments</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={customerInvoiceInsallments}
              optionLabel="InstallmentTitle"
              optionValue="InvoiceInstallmentID"
              name="InvoiceInstallmentID"
              placeholder="Select an insallment"
              showOnFocus={true}
              disabled={receiptType}
              required={method.watch("ReceiptType") !== "Advance"}
              focusOptions={() => method.setFocus("Amount")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3" as={Col} controlId="Amount">
          <Form.Label>Amount</Form.Label>
          <div>
            <NumberInput
              control={method.control}
              id={`Amount`}
              required={true}
              enterKeyOptions={() => method.setFocus("FromBank")}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group className="col-xl-3 " as={Col} controlId="FromBank">
          <Form.Label>From Bank</Form.Label>
          <div>
            <TextInput
              ID={"FromBank"}
              control={method.control}
              required={true}
              focusOptions={() => method.setFocus("ReceivedInBankID")}
            />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3 " as={Col} controlId="ReceivedInBankID">
          <Form.Label>Recieved In Back</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={bankAccountsSelectData}
              optionValue="BankAccountID"
              optionLabel="BankAccountTitle"
              name="ReceivedInBankID"
              placeholder="Select a bank"
              required={true}
              focusOptions={() => method.setFocus("TransactionID")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3 " as={Col} controlId="TransactionID">
          <Form.Label>Transaction ID</Form.Label>
          <div>
            <TextInput
              ID={"TransactionID"}
              control={method.control}
              focusOptions={() => method.setFocus("DetailDescription")}
              required={true}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group as={Col} controlId="DetailDescription">
          <Form.Label>Description</Form.Label>
          <Form.Control
            as={"textarea"}
            rows={1}
            className="small-textarea"
            style={{
              padding: "0.2rem 0.4rem",
              fontSize: "0.9em",
            }}
            {...method.register("DetailDescription")}
          />
        </Form.Group>
        <Form.Group className="col-xl-3" as={Col} controlId="Actions">
          <Form.Label></Form.Label>
          <DetailHeaderActionButtons
            handleAdd={() => method.handleSubmit(onAdd)()}
            handleClear={() => method.reset()}
          />
        </Form.Group>
      </Row>
    </>
  );
}
function OnlineTransferFieldsDetail({
  onlineFieldArray,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
}) {
  return (
    <>
      <table className="table table-responsive mt-2">
        <thead>
          <tr>
            <th
              className="p-2 text-white text-center "
              style={{ width: "2%", background: onlineDetailColor }}
            >
              Sr No.
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "10%", background: onlineDetailColor }}
            >
              Receipt Type
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "15%", background: onlineDetailColor }}
            >
              Customer Installment
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "4%", background: onlineDetailColor }}
            >
              Amount
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "10%", background: onlineDetailColor }}
            >
              From Bank
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "20%", background: onlineDetailColor }}
            >
              Received In Bank
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "4%", background: onlineDetailColor }}
            >
              Transaction ID
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "10%", background: onlineDetailColor }}
            >
              Description
            </th>
            <th
              className="p-2  text-white text-center "
              style={{ width: "4%", background: onlineDetailColor }}
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {onlineFieldArray.fields.map((item, index) => {
            return (
              <OnlineTransferFieldsDetailRow
                key={item.id}
                item={item}
                index={index}
                customerInvoiceInsallments={customerInvoiceInsallments}
                banksSelectData={banksSelectData}
                removeSingleRow={removeSingleRow}
                isEnable={isEnable}
              />
            );
          })}
        </tbody>
      </table>
    </>
  );
}
function OnlineTransferFieldsDetailRow({
  item,
  index,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
  isEnable,
}) {
  const method = useFormContext();

  return (
    <>
      <tr key={item.id}>
        <td>
          <input
            id="RowID"
            readOnly
            className="form-control"
            style={{ padding: "0.25rem 0.4rem", fontSize: "0.9em" }}
            value={index + 1}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={receiptTypeOptions}
            name={`onlineDetail.${index}.ReceiptType`}
            placeholder="Select a type"
            required={true}
            showOnFocus={true}
            onChange={(e) => {
              if (e.value === "Advance") {
                method.setValue(
                  `onlineDetail.${index}.CustomerInstallments`,
                  []
                );
              }
            }}
            focusOptions={() => {
              method.setFocus(
                method.watch(`onlineDetail.${index}.ReceiptType`) === "Advance"
                  ? `onlineDetail.${index}.CashAmount`
                  : `onlineDetail.${index}.CustomerInstallments`
              );
            }}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            name={`onlineDetail.${index}.InvoiceInstallmentID`}
            options={customerInvoiceInsallments}
            optionValue="InvoiceInstallmentID"
            optionLabel="InstallmentTitle"
            placeholder="Select an installment"
            required={
              method.watch(`onlineDetail.${index}.ReceiptType`) !== "Advance"
            }
            disabled={
              !isEnable ||
              method.watch(`onlineDetail.${index}.ReceiptType`) === "Advance"
            }
            focusOptions={() => method.setFocus(`onlineDetail.${index}.Amount`)}
          />
        </td>
        <td>
          <NumberInput
            control={method.control}
            id={`onlineDetail.${index}.Amount`}
            enterKeyOptions={() =>
              method.setFocus(`onlineDetail.${index}.FromBank`)
            }
            required={true}
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`onlineDetail.${index}.FromBank`}
            control={method.control}
            required={true}
            focusOptions={() =>
              method.setFocus(`onlineDetail.${index}.ReceivedInBankID`)
            }
            isEnable={isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={banksSelectData}
            optionValue="BankAccountID"
            optionLabel="BankAccountTitle"
            name={`onlineDetail.${index}.ReceivedInBankID`}
            placeholder="Select a bank"
            required={true}
            focusOptions={() =>
              method.setFocus(`onlineDetail.${index}.TransactionID`)
            }
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`onlineDetail.${index}.TransactionID`}
            control={method.control}
            focusOptions={() =>
              method.setFocus(`onlineDetail.${index}.DetailDescription`)
            }
            required={true}
            isEnable={isEnable}
          />
        </td>
        <td>
          <Form.Control
            as={"textarea"}
            rows={1}
            disabled={!isEnable}
            className="form-control"
            {...method.register(`onlineDetail.${index}.DetailDescription`)}
            style={{
              fontSize: "0.8em",
            }}
          />
        </td>
        <td>
          <Button
            icon="pi pi-minus"
            severity="danger"
            size="sm"
            type="button"
            style={{
              padding: "0.25rem .7rem",
              borderRadius: "16px",
              fontSize: "0.9em",
            }}
            onClick={() => removeSingleRow(index)}
          />
        </td>
      </tr>
    </>
  );
}
// Cheque Fields
function ChequeFields({
  appendSingleRow,
  customerInvoiceInsallments,
  bankAccountsSelectData,
  unregister,
}) {
  const [receiptType, setReceiptType] = useState(false);
  const method = useForm({
    ReceiptType: [],
    FromBank: "",
    ReceivedInBankID: [],
    TransactionID: "",
    InvoiceInstallmentID: [],
    Amount: 0,
    DetailDescription: "",
  });

  useEffect(() => {
    unregister("cashDetail");
    unregister("onlineDetail");
    unregister("dDDetail");
  }, [unregister]);

  function onAdd(data) {
    appendSingleRow(data);
    method.setFocus("ReceiptType");
    method.reset();
  }
  return (
    <>
      <Row className="mb-1">
        <Form.Group as={Col} controlId="ReceiptType" className="col-xl-3">
          <Form.Label>Receipt Type</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={receiptTypeOptions}
              name="ReceiptType"
              placeholder="Select a type"
              required={true}
              showOnFocus={true}
              onChange={(e) => {
                setReceiptType(e.value === "Advance");
                if (e.value === "Advance") {
                  method.setValue("InvoiceInstallmentID", []);
                }
              }}
              focusOptions={() => {
                method.setFocus(
                  method.watch("ReceiptType") === "Advance"
                    ? "Amount"
                    : "InvoiceInstallmentID"
                );
              }}
            />
          </div>
        </Form.Group>
        <Form.Group
          className="col-xl-3"
          as={Col}
          controlId="InvoiceInstallmentID"
        >
          <Form.Label>Customer Installments</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={customerInvoiceInsallments}
              optionLabel="InstallmentTitle"
              optionValue="InvoiceInstallmentID"
              name="InvoiceInstallmentID"
              placeholder="Select an insallment"
              showOnFocus={true}
              disabled={receiptType}
              required={method.watch("ReceiptType") !== "Advance"}
              focusOptions={() => method.setFocus("Amount")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3" as={Col} controlId="Amount">
          <Form.Label>Amount</Form.Label>
          <div>
            <NumberInput
              control={method.control}
              id={`Amount`}
              //   required={true}
              enterKeyOptions={() => method.setFocus("FromBank")}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group className="col-xl-3 " as={Col} controlId="FromBank">
          <Form.Label>Instrument Of</Form.Label>
          <div>
            <TextInput
              ID={"FromBank"}
              control={method.control}
              required={true}
              focusOptions={() => method.setFocus("ReceivedInBankID")}
            />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3 " as={Col} controlId="ReceivedInBankID">
          <Form.Label>To Bank</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={bankAccountsSelectData}
              optionValue="BankAccountID"
              optionLabel="BankAccountTitle"
              name="ReceivedInBankID"
              placeholder="Select a bank"
              required={true}
              focusOptions={() => method.setFocus("TransactionID")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3 " as={Col} controlId="TransactionID">
          <Form.Label>Instrument No</Form.Label>
          <div>
            <TextInput
              ID={"TransactionID"}
              control={method.control}
              focusOptions={() => method.setFocus("DetailDescription")}
              required={true}
            />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3 " as={Col} controlId="InstrumentDate">
          <Form.Label>Instrument Date</Form.Label>
          <div>
            <Controller
              control={method.control}
              name="InstrumentDate"
              render={({ field }) => (
                <ReactDatePicker
                  placeholderText="Select date"
                  onChange={(date) => field.onChange(date)}
                  selected={field.value || new Date()}
                  dateFormat={"dd-MMM-yyyy"}
                  className="binput"
                />
              )}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group as={Col} controlId="DetailDescription">
          <Form.Label>Description</Form.Label>
          <Form.Control
            as={"textarea"}
            rows={1}
            className="small-textarea"
            style={{
              padding: "0.2rem 0.4rem",
              fontSize: "0.9em",
            }}
            {...method.register("DetailDescription")}
          />
        </Form.Group>
        <Form.Group className="col-xl-3" as={Col} controlId="Actions">
          <Form.Label></Form.Label>
          <DetailHeaderActionButtons
            handleAdd={() => method.handleSubmit(onAdd)()}
            handleClear={() => method.reset()}
          />
        </Form.Group>
      </Row>
    </>
  );
}
function ChequeFieldsDetail({
  chequeFieldArray,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
}) {
  return (
    <>
      <table className="table table-responsive mt-2">
        <thead>
          <tr>
            <th
              className="p-2 text-white text-center "
              style={{ width: "2%", background: chequeDetailColor }}
            >
              Sr No.
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "5%", background: chequeDetailColor }}
            >
              Receipt Type
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "15%", background: chequeDetailColor }}
            >
              Customer Installment
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "4%", background: chequeDetailColor }}
            >
              Amount
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "7%", background: chequeDetailColor }}
            >
              Instrument Of
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "20%", background: chequeDetailColor }}
            >
              To Bank
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "10%", background: chequeDetailColor }}
            >
              Instrument No
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "7%", background: chequeDetailColor }}
            >
              Instrument Date
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "10%", background: chequeDetailColor }}
            >
              Description
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "4%", background: chequeDetailColor }}
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {chequeFieldArray.fields.map((item, index) => {
            return (
              <ChequeFieldsDetailRow
                key={item.id}
                item={item}
                index={index}
                customerInvoiceInsallments={customerInvoiceInsallments}
                banksSelectData={banksSelectData}
                removeSingleRow={removeSingleRow}
                isEnable={isEnable}
              />
            );
          })}
        </tbody>
      </table>
    </>
  );
}
function ChequeFieldsDetailRow({
  item,
  index,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
  isEnable,
}) {
  const method = useFormContext();

  return (
    <>
      <tr key={item.id}>
        <td>
          <input
            id="RowID"
            readOnly
            className="form-control"
            style={{ padding: "0.25rem 0.4rem", fontSize: "0.9em" }}
            value={index + 1}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={receiptTypeOptions}
            name={`chequeDetail.${index}.ReceiptType`}
            placeholder="Select a type"
            required={true}
            showOnFocus={true}
            onChange={(e) => {
              if (e.value === "Advance") {
                method.setValue(
                  `chequeDetail.${index}.CustomerInstallments`,
                  []
                );
              }
            }}
            focusOptions={() => {
              method.setFocus(
                method.watch(`chequeDetail.${index}.ReceiptType`) === "Advance"
                  ? `chequeDetail.${index}.CashAmount`
                  : `chequeDetail.${index}.CustomerInstallments`
              );
            }}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            name={`chequeDetail.${index}.InvoiceInstallmentID`}
            options={customerInvoiceInsallments}
            optionValue="InvoiceInstallmentID"
            optionLabel="InstallmentTitle"
            placeholder="Select an installment"
            required={
              method.watch(`chequeDetail.${index}.ReceiptType`) !== "Advance"
            }
            disabled={
              !isEnable ||
              method.watch(`chequeDetail.${index}.ReceiptType`) === "Advance"
            }
            focusOptions={() => method.setFocus(`chequeDetail.${index}.Amount`)}
          />
        </td>
        <td>
          <NumberInput
            control={method.control}
            id={`chequeDetail.${index}.Amount`}
            enterKeyOptions={() =>
              method.setFocus(`chequeDetail.${index}.FromBank`)
            }
            required={true}
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`chequeDetail.${index}.FromBank`}
            control={method.control}
            required={true}
            focusOptions={() =>
              method.setFocus(`chequeDetail.${index}.ReceivedInBankID`)
            }
            isEnable={isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={banksSelectData}
            optionValue="BankAccountID"
            optionLabel="BankAccountTitle"
            name={`chequeDetail.${index}.ReceivedInBankID`}
            placeholder="Select a bank"
            required={true}
            focusOptions={() =>
              method.setFocus(`chequeDetail.${index}.TransactionID`)
            }
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`chequeDetail.${index}.TransactionID`}
            control={method.control}
            focusOptions={() =>
              method.setFocus(`chequeDetail.${index}.DetailDescription`)
            }
            required={true}
            isEnable={isEnable}
          />
        </td>
        <td>
          <Controller
            control={method.control}
            name={`chequeDetail.${index}.InstrumentDate`}
            render={({ field }) => (
              <ReactDatePicker
                disabled={!isEnable}
                placeholderText="Select date"
                onChange={(date) => field.onChange(date)}
                selected={field.value}
                dateFormat={"dd-MMM-yyyy"}
                className={!isEnable ? "disabled-field" : "binput"}
              />
            )}
          />
        </td>
        <td>
          <Form.Control
            as={"textarea"}
            rows={1}
            disabled={!isEnable}
            className="form-control"
            {...method.register(`chequeDetail.${index}.DetailDescription`)}
            style={{
              fontSize: "0.8em",
            }}
          />
        </td>
        <td>
          <Button
            icon="pi pi-minus"
            severity="danger"
            size="sm"
            type="button"
            style={{
              padding: "0.25rem .7rem",
              borderRadius: "16px",
              fontSize: "0.9em",
            }}
            onClick={() => removeSingleRow(index)}
            disabled={!isEnable}
          />
        </td>
      </tr>
    </>
  );
}

// Updated DD Fields
function DDFields({
  appendSingleRow,
  customerInvoiceInsallments,
  bankAccountsSelectData,
  unregister,
}) {
  const [receiptType, setReceiptType] = useState(false);
  const method = useForm({
    ReceiptType: [],
    FromBank: "",
    ReceivedInBankID: [],
    TransactionID: "",
    InvoiceInstallmentID: [],
    Amount: 0,
    DetailDescription: "",
  });

  useEffect(() => {
    unregister("cashDetail");
    unregister("onlineDetail");
    unregister("chequeDetail");
  }, [unregister]);

  function onAdd(data) {
    appendSingleRow(data);
    method.setFocus("ReceiptType");
    method.reset();
  }
  return (
    <>
      <Row className="mb-1">
        <Form.Group as={Col} controlId="ReceiptType" className="col-xl-3">
          <Form.Label>Receipt Type</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={receiptTypeOptions}
              name="ReceiptType"
              placeholder="Select a type"
              required={true}
              showOnFocus={true}
              onChange={(e) => {
                setReceiptType(e.value === "Advance");
                if (e.value === "Advance") {
                  method.setValue("InvoiceInstallmentID", []);
                }
              }}
              focusOptions={() => {
                method.setFocus(
                  method.watch("ReceiptType") === "Advance"
                    ? "Amount"
                    : "InvoiceInstallmentID"
                );
              }}
            />
          </div>
        </Form.Group>
        <Form.Group
          className="col-xl-3"
          as={Col}
          controlId="InvoiceInstallmentID"
        >
          <Form.Label>Customer Installments</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={customerInvoiceInsallments}
              optionLabel="InstallmentTitle"
              optionValue="InvoiceInstallmentID"
              name="InvoiceInstallmentID"
              placeholder="Select an insallment"
              showOnFocus={true}
              disabled={receiptType}
              required={method.watch("ReceiptType") !== "Advance"}
              focusOptions={() => method.setFocus("Amount")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3" as={Col} controlId="Amount">
          <Form.Label>Amount</Form.Label>
          <div>
            <NumberInput
              control={method.control}
              id={`Amount`}
              //   required={true}
              enterKeyOptions={() => method.setFocus("FromBank")}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group className="col-xl-3 " as={Col} controlId="FromBank">
          <Form.Label>Instrument Of</Form.Label>
          <div>
            <TextInput
              ID={"FromBank"}
              control={method.control}
              required={true}
              focusOptions={() => method.setFocus("ReceivedInBankID")}
            />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3 " as={Col} controlId="ReceivedInBankID">
          <Form.Label>To Bank</Form.Label>
          <div>
            <CDropdown
              control={method.control}
              options={bankAccountsSelectData}
              optionValue="BankAccountID"
              optionLabel="BankAccountTitle"
              name="ReceivedInBankID"
              placeholder="Select a bank"
              required={true}
              focusOptions={() => method.setFocus("TransactionID")}
            />
          </div>
        </Form.Group>

        <Form.Group className="col-xl-3 " as={Col} controlId="TransactionID">
          <Form.Label>Instrument No</Form.Label>
          <div>
            <TextInput
              ID={"TransactionID"}
              control={method.control}
              focusOptions={() => method.setFocus("DetailDescription")}
              required={true}
            />
          </div>
        </Form.Group>
        <Form.Group className="col-xl-3 " as={Col} controlId="InstrumentDate">
          <Form.Label>Instrument Date</Form.Label>
          <div>
            <Controller
              control={method.control}
              name="InstrumentDate"
              render={({ field }) => (
                <ReactDatePicker
                  placeholderText="Select date"
                  onChange={(date) => field.onChange(date)}
                  selected={field.value || new Date()}
                  dateFormat={"dd-MMM-yyyy"}
                  className="binput"
                />
              )}
            />
          </div>
        </Form.Group>
      </Row>
      <Row>
        <Form.Group as={Col} controlId="DetailDescription">
          <Form.Label>Description</Form.Label>
          <Form.Control
            as={"textarea"}
            rows={1}
            className="small-textarea"
            style={{
              padding: "0.2rem 0.4rem",
              fontSize: "0.9em",
            }}
            {...method.register("DetailDescription")}
          />
        </Form.Group>
        <Form.Group className="col-xl-3" as={Col} controlId="Actions">
          <Form.Label></Form.Label>
          <DetailHeaderActionButtons
            handleAdd={() => method.handleSubmit(onAdd)()}
            handleClear={() => method.reset()}
          />
        </Form.Group>
      </Row>
    </>
  );
}
function DDFieldsDetail({
  ddFieldArray,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
}) {
  return (
    <>
      <table className="table table-responsive mt-2">
        <thead>
          <tr>
            <th
              className="p-2 text-white text-center "
              style={{ width: "2%", background: chequeDetailColor }}
            >
              Sr No.
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "5%", background: chequeDetailColor }}
            >
              Receipt Type
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "15%", background: chequeDetailColor }}
            >
              Customer Installment
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "4%", background: chequeDetailColor }}
            >
              Amount
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "7%", background: chequeDetailColor }}
            >
              Instrument Of
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "20%", background: chequeDetailColor }}
            >
              To Bank
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "10%", background: chequeDetailColor }}
            >
              Instrument No
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "7%", background: chequeDetailColor }}
            >
              Instrument Date
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "10%", background: chequeDetailColor }}
            >
              Description
            </th>
            <th
              className="p-2 text-white text-center "
              style={{ width: "4%", background: chequeDetailColor }}
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {ddFieldArray.fields.map((item, index) => {
            return (
              <DDFieldsDetailRow
                key={item.id}
                item={item}
                index={index}
                customerInvoiceInsallments={customerInvoiceInsallments}
                banksSelectData={banksSelectData}
                removeSingleRow={removeSingleRow}
                isEnable={isEnable}
              />
            );
          })}
        </tbody>
      </table>
    </>
  );
}
function DDFieldsDetailRow({
  item,
  index,
  customerInvoiceInsallments,
  banksSelectData,
  removeSingleRow,
  isEnable,
}) {
  const method = useFormContext();

  return (
    <>
      <tr key={item.id}>
        <td>
          <input
            id="RowID"
            readOnly
            className="form-control"
            style={{ padding: "0.25rem 0.4rem", fontSize: "0.9em" }}
            value={index + 1}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={receiptTypeOptions}
            name={`dDDetail.${index}.ReceiptType`}
            placeholder="Select a type"
            required={true}
            showOnFocus={true}
            onChange={(e) => {
              if (e.value === "Advance") {
                method.setValue(`dDDetail.${index}.CustomerInstallments`, []);
              }
            }}
            focusOptions={() => {
              method.setFocus(
                method.watch(`dDDetail.${index}.ReceiptType`) === "Advance"
                  ? `dDDetail.${index}.CashAmount`
                  : `dDDetail.${index}.CustomerInstallments`
              );
            }}
            disabled={!isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            name={`dDDetail.${index}.InvoiceInstallmentID`}
            options={customerInvoiceInsallments}
            optionValue="InvoiceInstallmentID"
            optionLabel="InstallmentTitle"
            placeholder="Select an installment"
            required={
              method.watch(`dDDetail.${index}.ReceiptType`) !== "Advance"
            }
            disabled={
              !isEnable ||
              method.watch(`dDDetail.${index}.ReceiptType`) === "Advance"
            }
            focusOptions={() => method.setFocus(`dDDetail.${index}.Amount`)}
          />
        </td>
        <td>
          <NumberInput
            control={method.control}
            id={`dDDetail.${index}.Amount`}
            enterKeyOptions={() =>
              method.setFocus(`dDDetail.${index}.FromBank`)
            }
            required={true}
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`dDDetail.${index}.FromBank`}
            control={method.control}
            required={true}
            focusOptions={() =>
              method.setFocus(`dDDetail.${index}.ReceivedInBankID`)
            }
            isEnable={isEnable}
          />
        </td>
        <td>
          <CDropdown
            control={method.control}
            options={banksSelectData}
            optionValue="BankAccountID"
            optionLabel="BankAccountTitle"
            name={`dDDetail.${index}.ReceivedInBankID`}
            placeholder="Select a bank"
            required={true}
            focusOptions={() =>
              method.setFocus(`dDDetail.${index}.TransactionID`)
            }
            disabled={!isEnable}
          />
        </td>
        <td>
          <TextInput
            ID={`dDDetail.${index}.TransactionID`}
            control={method.control}
            focusOptions={() =>
              method.setFocus(`dDDetail.${index}.DetailDescription`)
            }
            required={true}
            isEnable={isEnable}
          />
        </td>
        <td>
          <Controller
            control={method.control}
            name={`dDDetail.${index}.InstrumentDate`}
            render={({ field }) => (
              <ReactDatePicker
                disabled={!isEnable}
                placeholderText="Select date"
                onChange={(date) => field.onChange(date)}
                selected={field.value}
                dateFormat={"dd-MMM-yyyy"}
                className={!isEnable ? "disabled-field" : "binput"}
              />
            )}
          />
        </td>
        <td>
          <Form.Control
            as={"textarea"}
            rows={1}
            disabled={!isEnable}
            className="form-control"
            {...method.register(`dDDetail.${index}.DetailDescription`)}
            style={{
              fontSize: "0.8em",
            }}
          />
        </td>
        <td>
          <Button
            icon="pi pi-minus"
            severity="danger"
            size="sm"
            type="button"
            style={{
              padding: "0.25rem .7rem",
              borderRadius: "16px",
              fontSize: "0.9em",
            }}
            onClick={() => removeSingleRow(index)}
            disabled={!isEnable}
          />
        </td>
      </tr>
    </>
  );
}
// DD Fields
// function DDFields({
//   appendSingleRow,
//   customerInvoiceInsallments,

//   unregister,
// }) {
//   const [receiptType, setReceiptType] = useState(false);
//   const method = useForm({
//     ReceiptType: [],
//     FromBank: "",
//     ReceivedInBankID: [],
//     TransactionID: "",
//     InvoiceInstallmentID: [],
//     Amount: 0,
//     DetailDescription: "",
//   });

//   useEffect(() => {
//     unregister("cashDetail");
//     unregister("chequeDetail");
//     unregister("onlineDetail");
//   }, [unregister]);

//   function onAdd(data) {
//     appendSingleRow(data);
//     method.setFocus("Customer");
//     unregister("cashDetail");
//     method.reset();
//   }
//   return (
//     <>
//       <Row className="mb-1">
//         <Form.Group as={Col} controlId="ReceiptType" className="col-xl-3">
//           <Form.Label>Receipt Type</Form.Label>
//           <div>
//             <CDropdown
//               control={method.control}
//               options={receiptTypeOptions}
//               name="ReceiptType"
//               placeholder="Select a type"
//               required={true}
//               showOnFocus={true}
//               onChange={(e) => {
//                 setReceiptType(e.value === "Advance");
//                 if (e.value === "Advance") {
//                   method.setValue("InvoiceInstallmentID", []);
//                 }
//               }}
//               focusOptions={() => {
//                 method.setFocus(
//                   method.watch("ReceiptType") === "Advance"
//                     ? "Amount"
//                     : "InvoiceInstallmentID"
//                 );
//               }}
//             />
//           </div>
//         </Form.Group>
//         <Form.Group
//           className="col-xl-3"
//           as={Col}
//           controlId="InvoiceInstallmentID"
//         >
//           <Form.Label>Customer Installments</Form.Label>
//           <div>
//             <CDropdown
//               control={method.control}
//               options={customerInvoiceInsallments}
//               optionLabel="InstallmentTitle"
//               optionValue="InvoiceInstallmentID"
//               name="InvoiceInstallmentID"
//               placeholder="Select an insallment"
//               showOnFocus={true}
//               disabled={receiptType}
//               required={method.watch("ReceiptType") !== "Advance"}
//               focusOptions={() => method.setFocus("Amount")}
//             />
//           </div>
//         </Form.Group>

//         <Form.Group className="col-xl-3" as={Col} controlId="Amount">
//           <Form.Label>Amount</Form.Label>
//           <div>
//             <NumberInput
//               control={method.control}
//               id={`Amount`}
//               required={true}
//               enterKeyOptions={() => method.setFocus("FromBank")}
//             />
//           </div>
//         </Form.Group>
//       </Row>

//       <Row>
//         <Form.Group as={Col} controlId="DetailDescription">
//           <Form.Label>Description</Form.Label>
//           <Form.Control
//             as={"textarea"}
//             rows={1}
//             className="small-textarea"
//             style={{
//               padding: "0.2rem 0.4rem",
//               fontSize: "0.9em",
//             }}
//             {...method.register("DetailDescription")}
//           />
//         </Form.Group>
//         <Form.Group className="col-xl-3" as={Col} controlId="Actions">
//           <Form.Label></Form.Label>
//           <DetailHeaderActionButtons
//             handleAdd={() => method.handleSubmit(onAdd)()}
//             handleClear={() => method.reset()}
//           />
//         </Form.Group>
//       </Row>
//     </>
//   );
// }
// function DDFieldsDetail({
//   ddFieldArray,
//   isEnable,
//   customerInvoiceInsallments,
//   removeSingleRow,
// }) {
//   return (
//     <>
//       <table className="table table-responsive mt-2">
//         <thead>
//           <tr>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "2%", background: ddDetailColor }}
//             >
//               Sr No.
//             </th>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "10%", background: ddDetailColor }}
//             >
//               Receipt Type
//             </th>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "15%", background: ddDetailColor }}
//             >
//               Customer Installment
//             </th>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "4%", background: ddDetailColor }}
//             >
//               Amount
//             </th>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "10%", background: ddDetailColor }}
//             >
//               Description
//             </th>
//             <th
//               className="p-2 text-white text-center "
//               style={{ width: "4%", background: ddDetailColor }}
//             >
//               Actions
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {ddFieldArray.fields.map((item, index) => {
//             return (
//               <DDFieldsDetailRow
//                 key={item.id}
//                 item={item}
//                 index={index}
//                 customerInvoiceInsallments={customerInvoiceInsallments}
//                 removeSingleRow={removeSingleRow}
//                 isEnable={isEnable}
//               />
//             );
//           })}
//         </tbody>
//       </table>
//     </>
//   );
// }
// function DDFieldsDetailRow({
//   item,
//   index,
//   customerInvoiceInsallments,
//   removeSingleRow,
//   isEnable,
// }) {
//   const method = useFormContext();

//   return (
//     <>
//       <tr key={item.id}>
//         <td>
//           <input
//             id="RowID"
//             readOnly
//             className="form-control"
//             style={{ padding: "0.25rem 0.4rem", fontSize: "0.9em" }}
//             value={index + 1}
//             disabled={!isEnable}
//           />
//         </td>
//         <td>
//           <CDropdown
//             control={method.control}
//             options={receiptTypeOptions}
//             name={`dDDetail.${index}.ReceiptType`}
//             placeholder="Select a type"
//             required={true}
//             showOnFocus={true}
//             onChange={(e) => {
//               if (e.value === "Advance") {
//                 method.setValue(`dDDetail.${index}.CustomerInstallments`, []);
//               }
//             }}
//             focusOptions={() => {
//               method.setFocus(
//                 method.watch(`dDDetail.${index}.ReceiptType`) === "Advance"
//                   ? `dDDetail.${index}.CashAmount`
//                   : `dDDetail.${index}.CustomerInstallments`
//               );
//             }}
//             disabled={!isEnable}
//           />
//         </td>
//         <td>
//           <CDropdown
//             control={method.control}
//             name={`dDDetail.${index}.InvoiceInstallmentID`}
//             options={customerInvoiceInsallments}
//             optionValue="InvoiceInstallmentID"
//             optionLabel="InstallmentTitle"
//             placeholder="Select an installment"
//             required={
//               method.watch(`dDDetail.${index}.ReceiptType`) !== "Advance"
//             }
//             disabled={
//               !isEnable ||
//               method.watch(`dDDetail.${index}.ReceiptType`) === "Advance"
//             }
//             focusOptions={() => method.setFocus(`dDDetail.${index}.Amount`)}
//           />
//         </td>
//         <td>
//           <NumberInput
//             control={method.control}
//             id={`dDDetail.${index}.Amount`}
//             enterKeyOptions={() =>
//               method.setFocus(`dDDetail.${index}.FromBank`)
//             }
//             required={true}
//             disabled={!isEnable}
//           />
//         </td>

//         <td>
//           <Form.Control
//             as={"textarea"}
//             rows={1}
//             disabled={!isEnable}
//             className="form-control"
//             {...method.register(`dDDetail.${index}.DetailDescription`)}
//             style={{
//               fontSize: "0.8em",
//             }}
//           />
//         </td>
//         <td>
//           <Button
//             icon="pi pi-minus"
//             severity="danger"
//             size="sm"
//             type="button"
//             style={{
//               padding: "0.25rem .7rem",
//               borderRadius: "16px",
//               fontSize: "0.9em",
//             }}
//             onClick={() => removeSingleRow(index)}
//           />
//         </td>
//       </tr>
//     </>
//   );
// }
// Detail Hooks
function useCashModeDetail(
  control,
  isEnable,
  customerInvoiceInsallments,
  setValue
) {
  const useCashFieldDetailArray = useFieldArray({
    control: control,
    name: "cashDetail",
    rules: {
      required: true,
    },
  });

  function appendAllRows(data) {
    setValue(
      "cashDetail",
      data?.map((item, index) => {
        return {
          ReceiptType: item.RecoveryType,
          CustomerInstallments: item.InvoiceInstallmentID,
          FromBank: item.FromBank,
          ReceivedInBankID: item.ReceivedInBankID,
          TransactionID: item.TransactionID,
          CashAmount: item.Amount,
          CashDescription: item.DetailDescription,
        };
      })
    );
  }

  function appendSingleRow(data) {
    useCashFieldDetailArray.append({
      ReceiptType: data.ReceiptType,
      CustomerInstallments: data.CustomerInstallments,
      CashAmount: data.CashAmount,
      CashDescription: data.CashDescription,
    });
  }

  function removeAllRows() {
    useCashFieldDetailArray.remove();
  }

  function removeSingleRow(index) {
    useCashFieldDetailArray.remove(index);
  }

  return {
    fields: useCashFieldDetailArray.fields,
    appendAllRows,
    appendSingleRow,
    newRowIndex: useCashFieldDetailArray.fields.length + 1,
    removeAllRows,
    removeSingleRow,
    render: (
      <>
        <CashModeDetail
          cashFieldsArray={useCashFieldDetailArray}
          isEnable={isEnable}
          customerInvoiceInsallments={customerInvoiceInsallments}
        />
        <GetCashDetailTotal control={control} />
      </>
    ),
  };
}

function useOnlineModeDetail(
  control,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  setValue
) {
  const useOnlineFieldDetailArray = useFieldArray({
    control: control,
    name: "onlineDetail",
    rules: {
      required: true,
    },
  });

  function appendAllRows(data) {
    setValue(
      "onlineDetail",
      data?.map((item, index) => {
        return {
          ReceiptType: item.RecoveryType,
          InvoiceInstallmentID: item.InvoiceInstallmentID,
          FromBank: item.FromBank,
          ReceivedInBankID: item.ReceivedInBankID,
          TransactionID: item.TransactionID,
          Amount: item.Amount,
          DetailDescription: item.DetailDescription,
        };
      })
    );
  }

  function appendSingleRow(data) {
    useOnlineFieldDetailArray.append(data);
  }

  function removeAllRows() {
    useOnlineFieldDetailArray.remove();
  }

  function removeSingleRow(index) {
    useOnlineFieldDetailArray.remove(index);
  }

  return {
    fields: useOnlineFieldDetailArray.fields,
    appendAllRows,
    appendSingleRow,
    newRowIndex: useOnlineFieldDetailArray.fields.length + 1,
    removeAllRows,
    removeSingleRow,
    render: (
      <>
        <OnlineTransferFieldsDetail
          onlineFieldArray={useOnlineFieldDetailArray}
          isEnable={isEnable}
          customerInvoiceInsallments={customerInvoiceInsallments}
          banksSelectData={banksSelectData}
          removeSingleRow={removeSingleRow}
        />
        <GetOnlineDetailTotal control={control} />
      </>
    ),
  };
}

function useChequeModeDetail(
  control,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  setValue
) {
  const useChequeFieldDetailArray = useFieldArray({
    control: control,
    name: "chequeDetail",
    rules: {
      required: true,
    },
  });

  function appendAllRows(data) {
    // removeAllRows();
    setValue(
      "chequeDetail",
      data?.map((item, index) => {
        return {
          ReceiptType: item.RecoveryType,
          InvoiceInstallmentID: item.InvoiceInstallmentID,
          FromBank: item.FromBank,
          ReceivedInBankID: item.ReceivedInBankID,
          TransactionID: item.InstrumentNo,
          Amount: item.Amount,
          DetailDescription: item.DetailDescription,
          InstrumentDate: parseISO(item.InstrumentDate),
        };
      })
    );
  }

  function appendSingleRow(data) {
    let date = data.InstrumentDate || new Date();
    delete data.InstrumentDate;
    useChequeFieldDetailArray.append(data);
    let newIndex = useChequeFieldDetailArray.fields.length;
    setValue(`chequeDetail.${newIndex}.InstrumentDate`, date);
  }

  function removeAllRows() {
    useChequeFieldDetailArray.remove();
  }

  function removeSingleRow(index) {
    useChequeFieldDetailArray.remove(index);
  }

  return {
    fields: useChequeFieldDetailArray.fields,
    appendAllRows,
    appendSingleRow,
    newRowIndex: useChequeFieldDetailArray.fields.length + 1,
    removeAllRows,
    removeSingleRow,
    render: (
      <>
        <ChequeFieldsDetail
          chequeFieldArray={useChequeFieldDetailArray}
          isEnable={isEnable}
          customerInvoiceInsallments={customerInvoiceInsallments}
          banksSelectData={banksSelectData}
          removeSingleRow={removeSingleRow}
        />
        <GetChequeDetailTotal control={control} />
      </>
    ),
  };
}

function useDDModeDetail(
  control,
  isEnable,
  customerInvoiceInsallments,
  banksSelectData,
  setValue
) {
  const useDDFieldDetailArray = useFieldArray({
    control: control,
    name: "dDDetail",
    rules: {
      required: true,
    },
  });

  function appendAllRows(data) {
    setValue(
      "dDDetail",
      data?.map((item, index) => {
        return {
          ReceiptType: item.RecoveryType,
          InvoiceInstallmentID: item.InvoiceInstallmentID,
          FromBank: item.FromBank,
          ReceivedInBankID: item.ReceivedInBankID,
          TransactionID: item.InstrumentNo,
          Amount: item.Amount,
          DetailDescription: item.DetailDescription,
          InstrumentDate: parseISO(item.InstrumentDate),
        };
      })
    );
  }

  function appendSingleRow(data) {
    let date = data.InstrumentDate || new Date();
    delete data.InstrumentDate;
    useDDFieldDetailArray.append(data);
    let newIndex = useDDFieldDetailArray.fields.length;
    setValue(`dDDetail.${newIndex}.InstrumentDate`, date);
  }

  function removeAllRows() {
    useDDFieldDetailArray.remove();
  }

  function removeSingleRow(index) {
    useDDFieldDetailArray.remove(index);
  }

  return {
    fields: useDDFieldDetailArray.fields,
    appendAllRows,
    appendSingleRow,
    newRowIndex: useDDFieldDetailArray.fields.length + 1,
    removeAllRows,
    removeSingleRow,
    render: (
      <>
        <DDFieldsDetail
          ddFieldArray={useDDFieldDetailArray}
          isEnable={isEnable}
          customerInvoiceInsallments={customerInvoiceInsallments}
          banksSelectData={banksSelectData}
          removeSingleRow={removeSingleRow}
        />
        <GetdDDetailTotal control={control} />
      </>
    ),
  };
}

// Cash Total
function GetCashDetailTotal({ control }) {
  const details = useWatch({
    control,
    name: "cashDetail",
  });
  let total = getTotal("Cash", details);

  return (
    <>
      <hr style={{ margin: "0" }} />
      <Row style={{ justifyContent: "flex-end" }}>
        <Form.Group className="col-xl-3" as={Col} controlId="TotalNetAmount">
          <Form.Label>Total Net Amount</Form.Label>
          <div>
            <NumberInput
              control={control}
              id={`TotalNetAmount`}
              disabled
              value={total}
            />
          </div>
        </Form.Group>
      </Row>
    </>
  );
}

// Online Total
function GetOnlineDetailTotal({ control }) {
  const details = useWatch({
    control,
    name: "onlineDetail",
  });
  let total = getTotal("Online", details);

  return (
    <>
      <hr style={{ margin: "0" }} />
      <Row style={{ justifyContent: "flex-end" }}>
        <Form.Group className="col-xl-3" as={Col} controlId="TotalNetAmount">
          <Form.Label>Total Net Amount</Form.Label>
          <div>
            <NumberInput
              control={control}
              id={`TotalNetAmount`}
              disabled
              value={total}
            />
          </div>
        </Form.Group>
      </Row>
    </>
  );
}

// Cheque Total
function GetChequeDetailTotal({ control }) {
  const details = useWatch({
    control,
    name: "chequeDetail",
  });
  let total = getTotal("Cheque", details);

  return (
    <>
      <hr style={{ margin: "0" }} />
      <Row style={{ justifyContent: "flex-end" }}>
        <Form.Group className="col-xl-3" as={Col} controlId="TotalNetAmount">
          <Form.Label>Total Net Amount</Form.Label>
          <div>
            <NumberInput
              control={control}
              id={`TotalNetAmount`}
              disabled
              value={total}
            />
          </div>
        </Form.Group>
      </Row>
    </>
  );
}

// DD Total
function GetdDDetailTotal({ control }) {
  const details = useWatch({
    control,
    name: "dDDetail",
  });
  let total = getTotal("DD", details);

  return (
    <>
      <hr style={{ margin: "0" }} />
      <Row style={{ justifyContent: "flex-end" }}>
        <Form.Group className="col-xl-3" as={Col} controlId="TotalNetAmount">
          <Form.Label>Total Net Amount</Form.Label>
          <div>
            <NumberInput
              control={control}
              id={`TotalNetAmount`}
              disabled
              value={total}
            />
          </div>
        </Form.Group>
      </Row>
    </>
  );
}

function getTotal(from = "Cash", detail) {
  let total = 0;
  if (from === "Cash") {
    if (detail?.length > 0) {
      for (const item of detail) {
        for (const obj in item) {
          if (obj === "CashAmount") {
            total += item[obj];
          }
        }
      }
    }
  } else {
    if (detail?.length > 0) {
      for (const item of detail) {
        for (const obj in item) {
          if (obj === "Amount") {
            total += item[obj];
          }
        }
      }
    }
  }
  return total;
}